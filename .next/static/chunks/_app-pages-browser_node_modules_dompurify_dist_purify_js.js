"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_dompurify_dist_purify_js"],{

/***/ "(app-pages-browser)/./node_modules/dompurify/dist/purify.js":
/*!***********************************************!*\
  !*** ./node_modules/dompurify/dist/purify.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n/*! @license DOMPurify 2.5.7 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.5.7/LICENSE */ (function(global, factory) {\n     true ? module.exports = factory() : 0;\n})(void 0, function() {\n    \"use strict\";\n    function _typeof(obj) {\n        \"@babel/helpers - typeof\";\n        return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n            return typeof obj;\n        } : function(obj) {\n            return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        }, _typeof(obj);\n    }\n    function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n        };\n        return _setPrototypeOf(o, p);\n    }\n    function _isNativeReflectConstruct() {\n        if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n        if (Reflect.construct.sham) return false;\n        if (typeof Proxy === \"function\") return true;\n        try {\n            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    function _construct(Parent, args, Class) {\n        if (_isNativeReflectConstruct()) {\n            _construct = Reflect.construct;\n        } else {\n            _construct = function _construct(Parent, args, Class) {\n                var a = [\n                    null\n                ];\n                a.push.apply(a, args);\n                var Constructor = Function.bind.apply(Parent, a);\n                var instance = new Constructor();\n                if (Class) _setPrototypeOf(instance, Class.prototype);\n                return instance;\n            };\n        }\n        return _construct.apply(null, arguments);\n    }\n    function _toConsumableArray(arr) {\n        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n    }\n    function _arrayWithoutHoles(arr) {\n        if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n    }\n    function _iterableToArray(iter) {\n        if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n    }\n    function _unsupportedIterableToArray(o, minLen) {\n        if (!o) return;\n        if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n        var n = Object.prototype.toString.call(o).slice(8, -1);\n        if (n === \"Object\" && o.constructor) n = o.constructor.name;\n        if (n === \"Map\" || n === \"Set\") return Array.from(o);\n        if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n    }\n    function _arrayLikeToArray(arr, len) {\n        if (len == null || len > arr.length) len = arr.length;\n        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n        return arr2;\n    }\n    function _nonIterableSpread() {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var hasOwnProperty = Object.hasOwnProperty, setPrototypeOf = Object.setPrototypeOf, isFrozen = Object.isFrozen, getPrototypeOf = Object.getPrototypeOf, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n    var freeze = Object.freeze, seal = Object.seal, create = Object.create; // eslint-disable-line import/no-mutable-exports\n    var _ref = typeof Reflect !== \"undefined\" && Reflect, apply = _ref.apply, construct = _ref.construct;\n    if (!apply) {\n        apply = function apply(fun, thisValue, args) {\n            return fun.apply(thisValue, args);\n        };\n    }\n    if (!freeze) {\n        freeze = function freeze(x) {\n            return x;\n        };\n    }\n    if (!seal) {\n        seal = function seal(x) {\n            return x;\n        };\n    }\n    if (!construct) {\n        construct = function construct(Func, args) {\n            return _construct(Func, _toConsumableArray(args));\n        };\n    }\n    var arrayForEach = unapply(Array.prototype.forEach);\n    var arrayPop = unapply(Array.prototype.pop);\n    var arrayPush = unapply(Array.prototype.push);\n    var stringToLowerCase = unapply(String.prototype.toLowerCase);\n    var stringToString = unapply(String.prototype.toString);\n    var stringMatch = unapply(String.prototype.match);\n    var stringReplace = unapply(String.prototype.replace);\n    var stringIndexOf = unapply(String.prototype.indexOf);\n    var stringTrim = unapply(String.prototype.trim);\n    var regExpTest = unapply(RegExp.prototype.test);\n    var typeErrorCreate = unconstruct(TypeError);\n    function unapply(func) {\n        return function(thisArg) {\n            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                args[_key - 1] = arguments[_key];\n            }\n            return apply(func, thisArg, args);\n        };\n    }\n    function unconstruct(func) {\n        return function() {\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                args[_key2] = arguments[_key2];\n            }\n            return construct(func, args);\n        };\n    }\n    /* Add properties to a lookup table */ function addToSet(set, array, transformCaseFunc) {\n        var _transformCaseFunc;\n        transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;\n        if (setPrototypeOf) {\n            // Make 'in' and truthy checks like Boolean(set.constructor)\n            // independent of any properties defined on Object.prototype.\n            // Prevent prototype setters from intercepting set as a this value.\n            setPrototypeOf(set, null);\n        }\n        var l = array.length;\n        while(l--){\n            var element = array[l];\n            if (typeof element === \"string\") {\n                var lcElement = transformCaseFunc(element);\n                if (lcElement !== element) {\n                    // Config presets (e.g. tags.js, attrs.js) are immutable.\n                    if (!isFrozen(array)) {\n                        array[l] = lcElement;\n                    }\n                    element = lcElement;\n                }\n            }\n            set[element] = true;\n        }\n        return set;\n    }\n    /* Shallow clone an object */ function clone(object) {\n        var newObject = create(null);\n        var property;\n        for(property in object){\n            if (apply(hasOwnProperty, object, [\n                property\n            ]) === true) {\n                newObject[property] = object[property];\n            }\n        }\n        return newObject;\n    }\n    /* IE10 doesn't support __lookupGetter__ so lets'\n   * simulate it. It also automatically checks\n   * if the prop is function or getter and behaves\n   * accordingly. */ function lookupGetter(object, prop) {\n        while(object !== null){\n            var desc = getOwnPropertyDescriptor(object, prop);\n            if (desc) {\n                if (desc.get) {\n                    return unapply(desc.get);\n                }\n                if (typeof desc.value === \"function\") {\n                    return unapply(desc.value);\n                }\n            }\n            object = getPrototypeOf(object);\n        }\n        function fallbackValue(element) {\n            console.warn(\"fallback value for\", element);\n            return null;\n        }\n        return fallbackValue;\n    }\n    var html$1 = freeze([\n        \"a\",\n        \"abbr\",\n        \"acronym\",\n        \"address\",\n        \"area\",\n        \"article\",\n        \"aside\",\n        \"audio\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"big\",\n        \"blink\",\n        \"blockquote\",\n        \"body\",\n        \"br\",\n        \"button\",\n        \"canvas\",\n        \"caption\",\n        \"center\",\n        \"cite\",\n        \"code\",\n        \"col\",\n        \"colgroup\",\n        \"content\",\n        \"data\",\n        \"datalist\",\n        \"dd\",\n        \"decorator\",\n        \"del\",\n        \"details\",\n        \"dfn\",\n        \"dialog\",\n        \"dir\",\n        \"div\",\n        \"dl\",\n        \"dt\",\n        \"element\",\n        \"em\",\n        \"fieldset\",\n        \"figcaption\",\n        \"figure\",\n        \"font\",\n        \"footer\",\n        \"form\",\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\",\n        \"head\",\n        \"header\",\n        \"hgroup\",\n        \"hr\",\n        \"html\",\n        \"i\",\n        \"img\",\n        \"input\",\n        \"ins\",\n        \"kbd\",\n        \"label\",\n        \"legend\",\n        \"li\",\n        \"main\",\n        \"map\",\n        \"mark\",\n        \"marquee\",\n        \"menu\",\n        \"menuitem\",\n        \"meter\",\n        \"nav\",\n        \"nobr\",\n        \"ol\",\n        \"optgroup\",\n        \"option\",\n        \"output\",\n        \"p\",\n        \"picture\",\n        \"pre\",\n        \"progress\",\n        \"q\",\n        \"rp\",\n        \"rt\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"section\",\n        \"select\",\n        \"shadow\",\n        \"small\",\n        \"source\",\n        \"spacer\",\n        \"span\",\n        \"strike\",\n        \"strong\",\n        \"style\",\n        \"sub\",\n        \"summary\",\n        \"sup\",\n        \"table\",\n        \"tbody\",\n        \"td\",\n        \"template\",\n        \"textarea\",\n        \"tfoot\",\n        \"th\",\n        \"thead\",\n        \"time\",\n        \"tr\",\n        \"track\",\n        \"tt\",\n        \"u\",\n        \"ul\",\n        \"var\",\n        \"video\",\n        \"wbr\"\n    ]);\n    // SVG\n    var svg$1 = freeze([\n        \"svg\",\n        \"a\",\n        \"altglyph\",\n        \"altglyphdef\",\n        \"altglyphitem\",\n        \"animatecolor\",\n        \"animatemotion\",\n        \"animatetransform\",\n        \"circle\",\n        \"clippath\",\n        \"defs\",\n        \"desc\",\n        \"ellipse\",\n        \"filter\",\n        \"font\",\n        \"g\",\n        \"glyph\",\n        \"glyphref\",\n        \"hkern\",\n        \"image\",\n        \"line\",\n        \"lineargradient\",\n        \"marker\",\n        \"mask\",\n        \"metadata\",\n        \"mpath\",\n        \"path\",\n        \"pattern\",\n        \"polygon\",\n        \"polyline\",\n        \"radialgradient\",\n        \"rect\",\n        \"stop\",\n        \"style\",\n        \"switch\",\n        \"symbol\",\n        \"text\",\n        \"textpath\",\n        \"title\",\n        \"tref\",\n        \"tspan\",\n        \"view\",\n        \"vkern\"\n    ]);\n    var svgFilters = freeze([\n        \"feBlend\",\n        \"feColorMatrix\",\n        \"feComponentTransfer\",\n        \"feComposite\",\n        \"feConvolveMatrix\",\n        \"feDiffuseLighting\",\n        \"feDisplacementMap\",\n        \"feDistantLight\",\n        \"feFlood\",\n        \"feFuncA\",\n        \"feFuncB\",\n        \"feFuncG\",\n        \"feFuncR\",\n        \"feGaussianBlur\",\n        \"feImage\",\n        \"feMerge\",\n        \"feMergeNode\",\n        \"feMorphology\",\n        \"feOffset\",\n        \"fePointLight\",\n        \"feSpecularLighting\",\n        \"feSpotLight\",\n        \"feTile\",\n        \"feTurbulence\"\n    ]);\n    // List of SVG elements that are disallowed by default.\n    // We still need to know them so that we can do namespace\n    // checks properly in case one wants to add them to\n    // allow-list.\n    var svgDisallowed = freeze([\n        \"animate\",\n        \"color-profile\",\n        \"cursor\",\n        \"discard\",\n        \"fedropshadow\",\n        \"font-face\",\n        \"font-face-format\",\n        \"font-face-name\",\n        \"font-face-src\",\n        \"font-face-uri\",\n        \"foreignobject\",\n        \"hatch\",\n        \"hatchpath\",\n        \"mesh\",\n        \"meshgradient\",\n        \"meshpatch\",\n        \"meshrow\",\n        \"missing-glyph\",\n        \"script\",\n        \"set\",\n        \"solidcolor\",\n        \"unknown\",\n        \"use\"\n    ]);\n    var mathMl$1 = freeze([\n        \"math\",\n        \"menclose\",\n        \"merror\",\n        \"mfenced\",\n        \"mfrac\",\n        \"mglyph\",\n        \"mi\",\n        \"mlabeledtr\",\n        \"mmultiscripts\",\n        \"mn\",\n        \"mo\",\n        \"mover\",\n        \"mpadded\",\n        \"mphantom\",\n        \"mroot\",\n        \"mrow\",\n        \"ms\",\n        \"mspace\",\n        \"msqrt\",\n        \"mstyle\",\n        \"msub\",\n        \"msup\",\n        \"msubsup\",\n        \"mtable\",\n        \"mtd\",\n        \"mtext\",\n        \"mtr\",\n        \"munder\",\n        \"munderover\"\n    ]);\n    // Similarly to SVG, we want to know all MathML elements,\n    // even those that we disallow by default.\n    var mathMlDisallowed = freeze([\n        \"maction\",\n        \"maligngroup\",\n        \"malignmark\",\n        \"mlongdiv\",\n        \"mscarries\",\n        \"mscarry\",\n        \"msgroup\",\n        \"mstack\",\n        \"msline\",\n        \"msrow\",\n        \"semantics\",\n        \"annotation\",\n        \"annotation-xml\",\n        \"mprescripts\",\n        \"none\"\n    ]);\n    var text = freeze([\n        \"#text\"\n    ]);\n    var html = freeze([\n        \"accept\",\n        \"action\",\n        \"align\",\n        \"alt\",\n        \"autocapitalize\",\n        \"autocomplete\",\n        \"autopictureinpicture\",\n        \"autoplay\",\n        \"background\",\n        \"bgcolor\",\n        \"border\",\n        \"capture\",\n        \"cellpadding\",\n        \"cellspacing\",\n        \"checked\",\n        \"cite\",\n        \"class\",\n        \"clear\",\n        \"color\",\n        \"cols\",\n        \"colspan\",\n        \"controls\",\n        \"controlslist\",\n        \"coords\",\n        \"crossorigin\",\n        \"datetime\",\n        \"decoding\",\n        \"default\",\n        \"dir\",\n        \"disabled\",\n        \"disablepictureinpicture\",\n        \"disableremoteplayback\",\n        \"download\",\n        \"draggable\",\n        \"enctype\",\n        \"enterkeyhint\",\n        \"face\",\n        \"for\",\n        \"headers\",\n        \"height\",\n        \"hidden\",\n        \"high\",\n        \"href\",\n        \"hreflang\",\n        \"id\",\n        \"inputmode\",\n        \"integrity\",\n        \"ismap\",\n        \"kind\",\n        \"label\",\n        \"lang\",\n        \"list\",\n        \"loading\",\n        \"loop\",\n        \"low\",\n        \"max\",\n        \"maxlength\",\n        \"media\",\n        \"method\",\n        \"min\",\n        \"minlength\",\n        \"multiple\",\n        \"muted\",\n        \"name\",\n        \"nonce\",\n        \"noshade\",\n        \"novalidate\",\n        \"nowrap\",\n        \"open\",\n        \"optimum\",\n        \"pattern\",\n        \"placeholder\",\n        \"playsinline\",\n        \"poster\",\n        \"preload\",\n        \"pubdate\",\n        \"radiogroup\",\n        \"readonly\",\n        \"rel\",\n        \"required\",\n        \"rev\",\n        \"reversed\",\n        \"role\",\n        \"rows\",\n        \"rowspan\",\n        \"spellcheck\",\n        \"scope\",\n        \"selected\",\n        \"shape\",\n        \"size\",\n        \"sizes\",\n        \"span\",\n        \"srclang\",\n        \"start\",\n        \"src\",\n        \"srcset\",\n        \"step\",\n        \"style\",\n        \"summary\",\n        \"tabindex\",\n        \"title\",\n        \"translate\",\n        \"type\",\n        \"usemap\",\n        \"valign\",\n        \"value\",\n        \"width\",\n        \"xmlns\",\n        \"slot\"\n    ]);\n    var svg = freeze([\n        \"accent-height\",\n        \"accumulate\",\n        \"additive\",\n        \"alignment-baseline\",\n        \"ascent\",\n        \"attributename\",\n        \"attributetype\",\n        \"azimuth\",\n        \"basefrequency\",\n        \"baseline-shift\",\n        \"begin\",\n        \"bias\",\n        \"by\",\n        \"class\",\n        \"clip\",\n        \"clippathunits\",\n        \"clip-path\",\n        \"clip-rule\",\n        \"color\",\n        \"color-interpolation\",\n        \"color-interpolation-filters\",\n        \"color-profile\",\n        \"color-rendering\",\n        \"cx\",\n        \"cy\",\n        \"d\",\n        \"dx\",\n        \"dy\",\n        \"diffuseconstant\",\n        \"direction\",\n        \"display\",\n        \"divisor\",\n        \"dur\",\n        \"edgemode\",\n        \"elevation\",\n        \"end\",\n        \"fill\",\n        \"fill-opacity\",\n        \"fill-rule\",\n        \"filter\",\n        \"filterunits\",\n        \"flood-color\",\n        \"flood-opacity\",\n        \"font-family\",\n        \"font-size\",\n        \"font-size-adjust\",\n        \"font-stretch\",\n        \"font-style\",\n        \"font-variant\",\n        \"font-weight\",\n        \"fx\",\n        \"fy\",\n        \"g1\",\n        \"g2\",\n        \"glyph-name\",\n        \"glyphref\",\n        \"gradientunits\",\n        \"gradienttransform\",\n        \"height\",\n        \"href\",\n        \"id\",\n        \"image-rendering\",\n        \"in\",\n        \"in2\",\n        \"k\",\n        \"k1\",\n        \"k2\",\n        \"k3\",\n        \"k4\",\n        \"kerning\",\n        \"keypoints\",\n        \"keysplines\",\n        \"keytimes\",\n        \"lang\",\n        \"lengthadjust\",\n        \"letter-spacing\",\n        \"kernelmatrix\",\n        \"kernelunitlength\",\n        \"lighting-color\",\n        \"local\",\n        \"marker-end\",\n        \"marker-mid\",\n        \"marker-start\",\n        \"markerheight\",\n        \"markerunits\",\n        \"markerwidth\",\n        \"maskcontentunits\",\n        \"maskunits\",\n        \"max\",\n        \"mask\",\n        \"media\",\n        \"method\",\n        \"mode\",\n        \"min\",\n        \"name\",\n        \"numoctaves\",\n        \"offset\",\n        \"operator\",\n        \"opacity\",\n        \"order\",\n        \"orient\",\n        \"orientation\",\n        \"origin\",\n        \"overflow\",\n        \"paint-order\",\n        \"path\",\n        \"pathlength\",\n        \"patterncontentunits\",\n        \"patterntransform\",\n        \"patternunits\",\n        \"points\",\n        \"preservealpha\",\n        \"preserveaspectratio\",\n        \"primitiveunits\",\n        \"r\",\n        \"rx\",\n        \"ry\",\n        \"radius\",\n        \"refx\",\n        \"refy\",\n        \"repeatcount\",\n        \"repeatdur\",\n        \"restart\",\n        \"result\",\n        \"rotate\",\n        \"scale\",\n        \"seed\",\n        \"shape-rendering\",\n        \"specularconstant\",\n        \"specularexponent\",\n        \"spreadmethod\",\n        \"startoffset\",\n        \"stddeviation\",\n        \"stitchtiles\",\n        \"stop-color\",\n        \"stop-opacity\",\n        \"stroke-dasharray\",\n        \"stroke-dashoffset\",\n        \"stroke-linecap\",\n        \"stroke-linejoin\",\n        \"stroke-miterlimit\",\n        \"stroke-opacity\",\n        \"stroke\",\n        \"stroke-width\",\n        \"style\",\n        \"surfacescale\",\n        \"systemlanguage\",\n        \"tabindex\",\n        \"targetx\",\n        \"targety\",\n        \"transform\",\n        \"transform-origin\",\n        \"text-anchor\",\n        \"text-decoration\",\n        \"text-rendering\",\n        \"textlength\",\n        \"type\",\n        \"u1\",\n        \"u2\",\n        \"unicode\",\n        \"values\",\n        \"viewbox\",\n        \"visibility\",\n        \"version\",\n        \"vert-adv-y\",\n        \"vert-origin-x\",\n        \"vert-origin-y\",\n        \"width\",\n        \"word-spacing\",\n        \"wrap\",\n        \"writing-mode\",\n        \"xchannelselector\",\n        \"ychannelselector\",\n        \"x\",\n        \"x1\",\n        \"x2\",\n        \"xmlns\",\n        \"y\",\n        \"y1\",\n        \"y2\",\n        \"z\",\n        \"zoomandpan\"\n    ]);\n    var mathMl = freeze([\n        \"accent\",\n        \"accentunder\",\n        \"align\",\n        \"bevelled\",\n        \"close\",\n        \"columnsalign\",\n        \"columnlines\",\n        \"columnspan\",\n        \"denomalign\",\n        \"depth\",\n        \"dir\",\n        \"display\",\n        \"displaystyle\",\n        \"encoding\",\n        \"fence\",\n        \"frame\",\n        \"height\",\n        \"href\",\n        \"id\",\n        \"largeop\",\n        \"length\",\n        \"linethickness\",\n        \"lspace\",\n        \"lquote\",\n        \"mathbackground\",\n        \"mathcolor\",\n        \"mathsize\",\n        \"mathvariant\",\n        \"maxsize\",\n        \"minsize\",\n        \"movablelimits\",\n        \"notation\",\n        \"numalign\",\n        \"open\",\n        \"rowalign\",\n        \"rowlines\",\n        \"rowspacing\",\n        \"rowspan\",\n        \"rspace\",\n        \"rquote\",\n        \"scriptlevel\",\n        \"scriptminsize\",\n        \"scriptsizemultiplier\",\n        \"selection\",\n        \"separator\",\n        \"separators\",\n        \"stretchy\",\n        \"subscriptshift\",\n        \"supscriptshift\",\n        \"symmetric\",\n        \"voffset\",\n        \"width\",\n        \"xmlns\"\n    ]);\n    var xml = freeze([\n        \"xlink:href\",\n        \"xml:id\",\n        \"xlink:title\",\n        \"xml:space\",\n        \"xmlns:xlink\"\n    ]);\n    // eslint-disable-next-line unicorn/better-regex\n    var MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n    var ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\n    var TMPLIT_EXPR = seal(/\\${[\\w\\W]*}/gm);\n    var DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\n    var ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n    var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n    );\n    var IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n    var ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n    );\n    var DOCTYPE_NAME = seal(/^html$/i);\n    var CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n    var getGlobal = function getGlobal() {\n        return  false ? 0 : window;\n    };\n    /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n   * @param {Document} document The document object (to determine policy name suffix)\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n   * are not supported).\n   */ var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {\n        if (_typeof(trustedTypes) !== \"object\" || typeof trustedTypes.createPolicy !== \"function\") {\n            return null;\n        }\n        // Allow the callers to control the unique policy name\n        // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n        // Policy creation with duplicate names throws in Trusted Types.\n        var suffix = null;\n        var ATTR_NAME = \"data-tt-policy-suffix\";\n        if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {\n            suffix = document.currentScript.getAttribute(ATTR_NAME);\n        }\n        var policyName = \"dompurify\" + (suffix ? \"#\" + suffix : \"\");\n        try {\n            return trustedTypes.createPolicy(policyName, {\n                createHTML: function createHTML(html) {\n                    return html;\n                },\n                createScriptURL: function createScriptURL(scriptUrl) {\n                    return scriptUrl;\n                }\n            });\n        } catch (_) {\n            // Policy creation failed (most likely another DOMPurify script has\n            // already run). Skip creating the policy, as this will only cause errors\n            // if TT are enforced.\n            console.warn(\"TrustedTypes policy \" + policyName + \" could not be created.\");\n            return null;\n        }\n    };\n    function createDOMPurify() {\n        var window1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n        var DOMPurify = function DOMPurify(root) {\n            return createDOMPurify(root);\n        };\n        /**\n     * Version label, exposed for easier checks\n     * if DOMPurify is up to date or not\n     */ DOMPurify.version = \"2.5.7\";\n        /**\n     * Array of elements that DOMPurify removed during sanitation.\n     * Empty if nothing was removed.\n     */ DOMPurify.removed = [];\n        if (!window1 || !window1.document || window1.document.nodeType !== 9) {\n            // Not running in a browser, provide a factory function\n            // so that you can pass your own Window\n            DOMPurify.isSupported = false;\n            return DOMPurify;\n        }\n        var originalDocument = window1.document;\n        var document = window1.document;\n        var DocumentFragment = window1.DocumentFragment, HTMLTemplateElement = window1.HTMLTemplateElement, Node = window1.Node, Element = window1.Element, NodeFilter = window1.NodeFilter, _window$NamedNodeMap = window1.NamedNodeMap, NamedNodeMap = _window$NamedNodeMap === void 0 ? window1.NamedNodeMap || window1.MozNamedAttrMap : _window$NamedNodeMap, HTMLFormElement = window1.HTMLFormElement, DOMParser = window1.DOMParser, trustedTypes = window1.trustedTypes;\n        var ElementPrototype = Element.prototype;\n        var cloneNode = lookupGetter(ElementPrototype, \"cloneNode\");\n        var getNextSibling = lookupGetter(ElementPrototype, \"nextSibling\");\n        var getChildNodes = lookupGetter(ElementPrototype, \"childNodes\");\n        var getParentNode = lookupGetter(ElementPrototype, \"parentNode\");\n        // As per issue #47, the web-components registry is inherited by a\n        // new document created via createHTMLDocument. As per the spec\n        // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n        // a new empty registry is used when creating a template contents owner\n        // document, so we use that as our parent document to ensure nothing\n        // is inherited.\n        if (typeof HTMLTemplateElement === \"function\") {\n            var template = document.createElement(\"template\");\n            if (template.content && template.content.ownerDocument) {\n                document = template.content.ownerDocument;\n            }\n        }\n        var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);\n        var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML(\"\") : \"\";\n        var _document = document, implementation = _document.implementation, createNodeIterator = _document.createNodeIterator, createDocumentFragment = _document.createDocumentFragment, getElementsByTagName = _document.getElementsByTagName;\n        var importNode = originalDocument.importNode;\n        var documentMode = {};\n        try {\n            documentMode = clone(document).documentMode ? document.documentMode : {};\n        } catch (_) {}\n        var hooks = {};\n        /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */ DOMPurify.isSupported = typeof getParentNode === \"function\" && implementation && implementation.createHTMLDocument !== undefined && documentMode !== 9;\n        var MUSTACHE_EXPR$1 = MUSTACHE_EXPR, ERB_EXPR$1 = ERB_EXPR, TMPLIT_EXPR$1 = TMPLIT_EXPR, DATA_ATTR$1 = DATA_ATTR, ARIA_ATTR$1 = ARIA_ATTR, IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA, ATTR_WHITESPACE$1 = ATTR_WHITESPACE, CUSTOM_ELEMENT$1 = CUSTOM_ELEMENT;\n        var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;\n        /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */ /* allowed element names */ var ALLOWED_TAGS = null;\n        var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(svgFilters), _toConsumableArray(mathMl$1), _toConsumableArray(text)));\n        /* Allowed attribute names */ var ALLOWED_ATTR = null;\n        var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(mathMl), _toConsumableArray(xml)));\n        /*\n     * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\n     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n     */ var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {\n            tagNameCheck: {\n                writable: true,\n                configurable: false,\n                enumerable: true,\n                value: null\n            },\n            attributeNameCheck: {\n                writable: true,\n                configurable: false,\n                enumerable: true,\n                value: null\n            },\n            allowCustomizedBuiltInElements: {\n                writable: true,\n                configurable: false,\n                enumerable: true,\n                value: false\n            }\n        }));\n        /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */ var FORBID_TAGS = null;\n        /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */ var FORBID_ATTR = null;\n        /* Decide if ARIA attributes are okay */ var ALLOW_ARIA_ATTR = true;\n        /* Decide if custom data attributes are okay */ var ALLOW_DATA_ATTR = true;\n        /* Decide if unknown protocols are okay */ var ALLOW_UNKNOWN_PROTOCOLS = false;\n        /* Decide if self-closing tags in attributes are allowed.\n     * Usually removed due to a mXSS issue in jQuery 3.0 */ var ALLOW_SELF_CLOSE_IN_ATTR = true;\n        /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */ var SAFE_FOR_TEMPLATES = false;\n        /* Output should be safe even for XML used within HTML and alike.\n     * This means, DOMPurify removes comments when containing risky content.\n     */ var SAFE_FOR_XML = true;\n        /* Decide if document with <html>... should be returned */ var WHOLE_DOCUMENT = false;\n        /* Track whether config is already set on this instance of DOMPurify. */ var SET_CONFIG = false;\n        /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */ var FORCE_BODY = false;\n        /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */ var RETURN_DOM = false;\n        /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */ var RETURN_DOM_FRAGMENT = false;\n        /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */ var RETURN_TRUSTED_TYPE = false;\n        /* Output should be free from DOM clobbering attacks?\n     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n     */ var SANITIZE_DOM = true;\n        /* Achieve full DOM Clobbering protection by isolating the namespace of named\n     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n     *\n     * HTML/DOM spec rules that enable DOM Clobbering:\n     *   - Named Access on Window (§7.3.3)\n     *   - DOM Tree Accessors (§3.1.5)\n     *   - Form Element Parent-Child Relations (§4.10.3)\n     *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n     *   - HTMLCollection (§4.2.10.2)\n     *\n     * Namespace isolation is implemented by prefixing `id` and `name` attributes\n     * with a constant string, i.e., `user-content-`\n     */ var SANITIZE_NAMED_PROPS = false;\n        var SANITIZE_NAMED_PROPS_PREFIX = \"user-content-\";\n        /* Keep element content when removing element? */ var KEEP_CONTENT = true;\n        /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */ var IN_PLACE = false;\n        /* Allow usage of profiles like html, svg and mathMl */ var USE_PROFILES = {};\n        /* Tags to ignore content of when KEEP_CONTENT is true */ var FORBID_CONTENTS = null;\n        var DEFAULT_FORBID_CONTENTS = addToSet({}, [\n            \"annotation-xml\",\n            \"audio\",\n            \"colgroup\",\n            \"desc\",\n            \"foreignobject\",\n            \"head\",\n            \"iframe\",\n            \"math\",\n            \"mi\",\n            \"mn\",\n            \"mo\",\n            \"ms\",\n            \"mtext\",\n            \"noembed\",\n            \"noframes\",\n            \"noscript\",\n            \"plaintext\",\n            \"script\",\n            \"style\",\n            \"svg\",\n            \"template\",\n            \"thead\",\n            \"title\",\n            \"video\",\n            \"xmp\"\n        ]);\n        /* Tags that are safe for data: URIs */ var DATA_URI_TAGS = null;\n        var DEFAULT_DATA_URI_TAGS = addToSet({}, [\n            \"audio\",\n            \"video\",\n            \"img\",\n            \"source\",\n            \"image\",\n            \"track\"\n        ]);\n        /* Attributes safe for values like \"javascript:\" */ var URI_SAFE_ATTRIBUTES = null;\n        var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [\n            \"alt\",\n            \"class\",\n            \"for\",\n            \"id\",\n            \"label\",\n            \"name\",\n            \"pattern\",\n            \"placeholder\",\n            \"role\",\n            \"summary\",\n            \"title\",\n            \"value\",\n            \"style\",\n            \"xmlns\"\n        ]);\n        var MATHML_NAMESPACE = \"http://www.w3.org/1998/Math/MathML\";\n        var SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\n        var HTML_NAMESPACE = \"http://www.w3.org/1999/xhtml\";\n        /* Document namespace */ var NAMESPACE = HTML_NAMESPACE;\n        var IS_EMPTY_INPUT = false;\n        /* Allowed XHTML+XML namespaces */ var ALLOWED_NAMESPACES = null;\n        var DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [\n            MATHML_NAMESPACE,\n            SVG_NAMESPACE,\n            HTML_NAMESPACE\n        ], stringToString);\n        /* Parsing of strict XHTML documents */ var PARSER_MEDIA_TYPE;\n        var SUPPORTED_PARSER_MEDIA_TYPES = [\n            \"application/xhtml+xml\",\n            \"text/html\"\n        ];\n        var DEFAULT_PARSER_MEDIA_TYPE = \"text/html\";\n        var transformCaseFunc;\n        /* Keep a reference to config to pass to hooks */ var CONFIG = null;\n        /* Ideally, do not touch anything below this line */ /* ______________________________________________ */ var formElement = document.createElement(\"form\");\n        var isRegexOrFunction = function isRegexOrFunction(testValue) {\n            return testValue instanceof RegExp || testValue instanceof Function;\n        };\n        /**\n     * _parseConfig\n     *\n     * @param  {Object} cfg optional config literal\n     */ // eslint-disable-next-line complexity\n        var _parseConfig = function _parseConfig(cfg) {\n            if (CONFIG && CONFIG === cfg) {\n                return;\n            }\n            /* Shield configuration object from tampering */ if (!cfg || _typeof(cfg) !== \"object\") {\n                cfg = {};\n            }\n            /* Shield configuration object from prototype pollution */ cfg = clone(cfg);\n            PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes\n            SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;\n            // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n            transformCaseFunc = PARSER_MEDIA_TYPE === \"application/xhtml+xml\" ? stringToString : stringToLowerCase;\n            /* Set configuration parameters */ ALLOWED_TAGS = \"ALLOWED_TAGS\" in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n            ALLOWED_ATTR = \"ALLOWED_ATTR\" in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n            ALLOWED_NAMESPACES = \"ALLOWED_NAMESPACES\" in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n            URI_SAFE_ATTRIBUTES = \"ADD_URI_SAFE_ATTR\" in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent\n            cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent\n            transformCaseFunc // eslint-disable-line indent\n            ) // eslint-disable-line indent\n             : DEFAULT_URI_SAFE_ATTRIBUTES;\n            DATA_URI_TAGS = \"ADD_DATA_URI_TAGS\" in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent\n            cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent\n            transformCaseFunc // eslint-disable-line indent\n            ) // eslint-disable-line indent\n             : DEFAULT_DATA_URI_TAGS;\n            FORBID_CONTENTS = \"FORBID_CONTENTS\" in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n            FORBID_TAGS = \"FORBID_TAGS\" in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n            FORBID_ATTR = \"FORBID_ATTR\" in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n            USE_PROFILES = \"USE_PROFILES\" in cfg ? cfg.USE_PROFILES : false;\n            ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n            ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n            ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n            ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n            SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n            SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n            WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n            RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n            RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n            RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n            FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n            SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n            SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n            KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n            IN_PLACE = cfg.IN_PLACE || false; // Default false\n            IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;\n            NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n            CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n            if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n                CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n            }\n            if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n                CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n            }\n            if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === \"boolean\") {\n                CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n            }\n            if (SAFE_FOR_TEMPLATES) {\n                ALLOW_DATA_ATTR = false;\n            }\n            if (RETURN_DOM_FRAGMENT) {\n                RETURN_DOM = true;\n            }\n            /* Parse profile info */ if (USE_PROFILES) {\n                ALLOWED_TAGS = addToSet({}, _toConsumableArray(text));\n                ALLOWED_ATTR = [];\n                if (USE_PROFILES.html === true) {\n                    addToSet(ALLOWED_TAGS, html$1);\n                    addToSet(ALLOWED_ATTR, html);\n                }\n                if (USE_PROFILES.svg === true) {\n                    addToSet(ALLOWED_TAGS, svg$1);\n                    addToSet(ALLOWED_ATTR, svg);\n                    addToSet(ALLOWED_ATTR, xml);\n                }\n                if (USE_PROFILES.svgFilters === true) {\n                    addToSet(ALLOWED_TAGS, svgFilters);\n                    addToSet(ALLOWED_ATTR, svg);\n                    addToSet(ALLOWED_ATTR, xml);\n                }\n                if (USE_PROFILES.mathMl === true) {\n                    addToSet(ALLOWED_TAGS, mathMl$1);\n                    addToSet(ALLOWED_ATTR, mathMl);\n                    addToSet(ALLOWED_ATTR, xml);\n                }\n            }\n            /* Merge configuration parameters */ if (cfg.ADD_TAGS) {\n                if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n                    ALLOWED_TAGS = clone(ALLOWED_TAGS);\n                }\n                addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n            }\n            if (cfg.ADD_ATTR) {\n                if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n                    ALLOWED_ATTR = clone(ALLOWED_ATTR);\n                }\n                addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n            }\n            if (cfg.ADD_URI_SAFE_ATTR) {\n                addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n            }\n            if (cfg.FORBID_CONTENTS) {\n                if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n                    FORBID_CONTENTS = clone(FORBID_CONTENTS);\n                }\n                addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n            }\n            /* Add #text in case KEEP_CONTENT is set to true */ if (KEEP_CONTENT) {\n                ALLOWED_TAGS[\"#text\"] = true;\n            }\n            /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */ if (WHOLE_DOCUMENT) {\n                addToSet(ALLOWED_TAGS, [\n                    \"html\",\n                    \"head\",\n                    \"body\"\n                ]);\n            }\n            /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */ if (ALLOWED_TAGS.table) {\n                addToSet(ALLOWED_TAGS, [\n                    \"tbody\"\n                ]);\n                delete FORBID_TAGS.tbody;\n            }\n            // Prevent further manipulation of configuration.\n            // Not available in IE8, Safari 5, etc.\n            if (freeze) {\n                freeze(cfg);\n            }\n            CONFIG = cfg;\n        };\n        var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [\n            \"mi\",\n            \"mo\",\n            \"mn\",\n            \"ms\",\n            \"mtext\"\n        ]);\n        var HTML_INTEGRATION_POINTS = addToSet({}, [\n            \"annotation-xml\"\n        ]);\n        // Certain elements are allowed in both SVG and HTML\n        // namespace. We need to specify them explicitly\n        // so that they don't get erroneously deleted from\n        // HTML namespace.\n        var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, [\n            \"title\",\n            \"style\",\n            \"font\",\n            \"a\",\n            \"script\"\n        ]);\n        /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */ var ALL_SVG_TAGS = addToSet({}, svg$1);\n        addToSet(ALL_SVG_TAGS, svgFilters);\n        addToSet(ALL_SVG_TAGS, svgDisallowed);\n        var ALL_MATHML_TAGS = addToSet({}, mathMl$1);\n        addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\n        /**\n     *\n     *\n     * @param  {Element} element a DOM element whose namespace is being checked\n     * @returns {boolean} Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */ var _checkValidNamespace = function _checkValidNamespace(element) {\n            var parent = getParentNode(element);\n            // In JSDOM, if we're inside shadow DOM, then parentNode\n            // can be null. We just simulate parent in this case.\n            if (!parent || !parent.tagName) {\n                parent = {\n                    namespaceURI: NAMESPACE,\n                    tagName: \"template\"\n                };\n            }\n            var tagName = stringToLowerCase(element.tagName);\n            var parentTagName = stringToLowerCase(parent.tagName);\n            if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n                return false;\n            }\n            if (element.namespaceURI === SVG_NAMESPACE) {\n                // The only way to switch from HTML namespace to SVG\n                // is via <svg>. If it happens via any other tag, then\n                // it should be killed.\n                if (parent.namespaceURI === HTML_NAMESPACE) {\n                    return tagName === \"svg\";\n                }\n                // The only way to switch from MathML to SVG is via`\n                // svg if parent is either <annotation-xml> or MathML\n                // text integration points.\n                if (parent.namespaceURI === MATHML_NAMESPACE) {\n                    return tagName === \"svg\" && (parentTagName === \"annotation-xml\" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n                }\n                // We only allow elements that are defined in SVG\n                // spec. All others are disallowed in SVG namespace.\n                return Boolean(ALL_SVG_TAGS[tagName]);\n            }\n            if (element.namespaceURI === MATHML_NAMESPACE) {\n                // The only way to switch from HTML namespace to MathML\n                // is via <math>. If it happens via any other tag, then\n                // it should be killed.\n                if (parent.namespaceURI === HTML_NAMESPACE) {\n                    return tagName === \"math\";\n                }\n                // The only way to switch from SVG to MathML is via\n                // <math> and HTML integration points\n                if (parent.namespaceURI === SVG_NAMESPACE) {\n                    return tagName === \"math\" && HTML_INTEGRATION_POINTS[parentTagName];\n                }\n                // We only allow elements that are defined in MathML\n                // spec. All others are disallowed in MathML namespace.\n                return Boolean(ALL_MATHML_TAGS[tagName]);\n            }\n            if (element.namespaceURI === HTML_NAMESPACE) {\n                // The only way to switch from SVG to HTML is via\n                // HTML integration points, and from MathML to HTML\n                // is via MathML text integration points\n                if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n                    return false;\n                }\n                if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n                    return false;\n                }\n                // We disallow tags that are specific for MathML\n                // or SVG and should never appear in HTML namespace\n                return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n            }\n            // For XHTML and XML documents that support custom namespaces\n            if (PARSER_MEDIA_TYPE === \"application/xhtml+xml\" && ALLOWED_NAMESPACES[element.namespaceURI]) {\n                return true;\n            }\n            // The code should never reach this place (this means\n            // that the element somehow got namespace that is not\n            // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n            // Return false just in case.\n            return false;\n        };\n        /**\n     * _forceRemove\n     *\n     * @param  {Node} node a DOM node\n     */ var _forceRemove = function _forceRemove(node) {\n            arrayPush(DOMPurify.removed, {\n                element: node\n            });\n            try {\n                // eslint-disable-next-line unicorn/prefer-dom-node-remove\n                node.parentNode.removeChild(node);\n            } catch (_) {\n                try {\n                    node.outerHTML = emptyHTML;\n                } catch (_) {\n                    node.remove();\n                }\n            }\n        };\n        /**\n     * _removeAttribute\n     *\n     * @param  {String} name an Attribute name\n     * @param  {Node} node a DOM node\n     */ var _removeAttribute = function _removeAttribute(name, node) {\n            try {\n                arrayPush(DOMPurify.removed, {\n                    attribute: node.getAttributeNode(name),\n                    from: node\n                });\n            } catch (_) {\n                arrayPush(DOMPurify.removed, {\n                    attribute: null,\n                    from: node\n                });\n            }\n            node.removeAttribute(name);\n            // We void attribute values for unremovable \"is\"\" attributes\n            if (name === \"is\" && !ALLOWED_ATTR[name]) {\n                if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n                    try {\n                        _forceRemove(node);\n                    } catch (_) {}\n                } else {\n                    try {\n                        node.setAttribute(name, \"\");\n                    } catch (_) {}\n                }\n            }\n        };\n        /**\n     * _initDocument\n     *\n     * @param  {String} dirty a string of dirty markup\n     * @return {Document} a DOM, filled with the dirty markup\n     */ var _initDocument = function _initDocument(dirty) {\n            /* Create a HTML document */ var doc;\n            var leadingWhitespace;\n            if (FORCE_BODY) {\n                dirty = \"<remove></remove>\" + dirty;\n            } else {\n                /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */ var matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n                leadingWhitespace = matches && matches[0];\n            }\n            if (PARSER_MEDIA_TYPE === \"application/xhtml+xml\" && NAMESPACE === HTML_NAMESPACE) {\n                // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n                dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + \"</body></html>\";\n            }\n            var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n            /*\n       * Use the DOMParser API by default, fallback later if needs be\n       * DOMParser not work for svg when has multiple root element.\n       */ if (NAMESPACE === HTML_NAMESPACE) {\n                try {\n                    doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n                } catch (_) {}\n            }\n            /* Use createHTMLDocument in case DOMParser is not available */ if (!doc || !doc.documentElement) {\n                doc = implementation.createDocument(NAMESPACE, \"template\", null);\n                try {\n                    doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n                } catch (_) {\n                // Syntax error if dirtyPayload is invalid xml\n                }\n            }\n            var body = doc.body || doc.documentElement;\n            if (dirty && leadingWhitespace) {\n                body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n            }\n            /* Work on whole document or just its body */ if (NAMESPACE === HTML_NAMESPACE) {\n                return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? \"html\" : \"body\")[0];\n            }\n            return WHOLE_DOCUMENT ? doc.documentElement : body;\n        };\n        /**\n     * _createIterator\n     *\n     * @param  {Document} root document/fragment to create iterator for\n     * @return {Iterator} iterator instance\n     */ var _createIterator = function _createIterator(root) {\n            return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise\n            NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null, false);\n        };\n        /**\n     * _isClobbered\n     *\n     * @param  {Node} elm element to check for clobbering attacks\n     * @return {Boolean} true if clobbered, false if safe\n     */ var _isClobbered = function _isClobbered(elm) {\n            return elm instanceof HTMLFormElement && (typeof elm.nodeName !== \"string\" || typeof elm.textContent !== \"string\" || typeof elm.removeChild !== \"function\" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== \"function\" || typeof elm.setAttribute !== \"function\" || typeof elm.namespaceURI !== \"string\" || typeof elm.insertBefore !== \"function\" || typeof elm.hasChildNodes !== \"function\");\n        };\n        /**\n     * _isNode\n     *\n     * @param  {Node} obj object to check whether it's a DOM node\n     * @return {Boolean} true is object is a DOM node\n     */ var _isNode = function _isNode(object) {\n            return _typeof(Node) === \"object\" ? object instanceof Node : object && _typeof(object) === \"object\" && typeof object.nodeType === \"number\" && typeof object.nodeName === \"string\";\n        };\n        /**\n     * _executeHook\n     * Execute user configurable hooks\n     *\n     * @param  {String} entryPoint  Name of the hook's entry point\n     * @param  {Node} currentNode node to work on with the hook\n     * @param  {Object} data additional hook parameters\n     */ var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n            if (!hooks[entryPoint]) {\n                return;\n            }\n            arrayForEach(hooks[entryPoint], function(hook) {\n                hook.call(DOMPurify, currentNode, data, CONFIG);\n            });\n        };\n        /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     *\n     * @param   {Node} currentNode to check for permission to exist\n     * @return  {Boolean} true if node was killed, false if left alive\n     */ var _sanitizeElements = function _sanitizeElements(currentNode) {\n            var content;\n            /* Execute a hook if present */ _executeHook(\"beforeSanitizeElements\", currentNode, null);\n            /* Check if element is clobbered or can clobber */ if (_isClobbered(currentNode)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Check if tagname contains Unicode */ if (regExpTest(/[\\u0080-\\uFFFF]/, currentNode.nodeName)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Now let's check the element's type and name */ var tagName = transformCaseFunc(currentNode.nodeName);\n            /* Execute a hook if present */ _executeHook(\"uponSanitizeElement\", currentNode, {\n                tagName: tagName,\n                allowedTags: ALLOWED_TAGS\n            });\n            /* Detect mXSS attempts abusing namespace confusion */ if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Mitigate a problem with templates inside select */ if (tagName === \"select\" && regExpTest(/<template/i, currentNode.innerHTML)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Remove any ocurrence of processing instructions */ if (currentNode.nodeType === 7) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Remove any kind of possibly harmful comments */ if (SAFE_FOR_XML && currentNode.nodeType === 8 && regExpTest(/<[/\\w]/g, currentNode.data)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Remove element if anything forbids its presence */ if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n                /* Check if we have a custom element to handle */ if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {\n                    if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;\n                    if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;\n                }\n                /* Keep content except for bad-listed elements */ if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n                    var parentNode = getParentNode(currentNode) || currentNode.parentNode;\n                    var childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n                    if (childNodes && parentNode) {\n                        var childCount = childNodes.length;\n                        for(var i = childCount - 1; i >= 0; --i){\n                            var childClone = cloneNode(childNodes[i], true);\n                            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n                            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n                        }\n                    }\n                }\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Check whether element has a valid namespace */ if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Make sure that older browsers don't get fallback-tag mXSS */ if ((tagName === \"noscript\" || tagName === \"noembed\" || tagName === \"noframes\") && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Sanitize element content to be template-safe */ if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n                /* Get the element's text content */ content = currentNode.textContent;\n                content = stringReplace(content, MUSTACHE_EXPR$1, \" \");\n                content = stringReplace(content, ERB_EXPR$1, \" \");\n                content = stringReplace(content, TMPLIT_EXPR$1, \" \");\n                if (currentNode.textContent !== content) {\n                    arrayPush(DOMPurify.removed, {\n                        element: currentNode.cloneNode()\n                    });\n                    currentNode.textContent = content;\n                }\n            }\n            /* Execute a hook if present */ _executeHook(\"afterSanitizeElements\", currentNode, null);\n            return false;\n        };\n        /**\n     * _isValidAttribute\n     *\n     * @param  {string} lcTag Lowercase tag name of containing element.\n     * @param  {string} lcName Lowercase attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\n     */ // eslint-disable-next-line complexity\n        var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n            /* Make sure attribute cannot clobber */ if (SANITIZE_DOM && (lcName === \"id\" || lcName === \"name\") && (value in document || value in formElement)) {\n                return false;\n            }\n            /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */ if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName)) ;\n            else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName)) ;\n            else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n                if (// First condition does a very basic check if a) it's basically a valid custom element tagname AND\n                // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n                // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n                _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND\n                // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n                lcName === \"is\" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ;\n                else {\n                    return false;\n                }\n            /* Check value is safe. First, is attr inert? If so, is safe */ } else if (URI_SAFE_ATTRIBUTES[lcName]) ;\n            else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, \"\"))) ;\n            else if ((lcName === \"src\" || lcName === \"xlink:href\" || lcName === \"href\") && lcTag !== \"script\" && stringIndexOf(value, \"data:\") === 0 && DATA_URI_TAGS[lcTag]) ;\n            else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, \"\"))) ;\n            else if (value) {\n                return false;\n            } else ;\n            return true;\n        };\n        /**\n     * _basicCustomElementCheck\n     * checks if at least one dash is included in tagName, and it's not the first char\n     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n     * @param {string} tagName name of the tag of the node to sanitize\n     */ var _basicCustomElementTest = function _basicCustomElementTest(tagName) {\n            return tagName !== \"annotation-xml\" && stringMatch(tagName, CUSTOM_ELEMENT$1);\n        };\n        /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param  {Node} currentNode to sanitize\n     */ var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n            var attr;\n            var value;\n            var lcName;\n            var l;\n            /* Execute a hook if present */ _executeHook(\"beforeSanitizeAttributes\", currentNode, null);\n            var attributes = currentNode.attributes;\n            /* Check if we have attributes; if not we might have a text node */ if (!attributes) {\n                return;\n            }\n            var hookEvent = {\n                attrName: \"\",\n                attrValue: \"\",\n                keepAttr: true,\n                allowedAttributes: ALLOWED_ATTR\n            };\n            l = attributes.length;\n            /* Go backwards over all attributes; safely remove bad ones */ while(l--){\n                attr = attributes[l];\n                var _attr = attr, name = _attr.name, namespaceURI = _attr.namespaceURI;\n                value = name === \"value\" ? attr.value : stringTrim(attr.value);\n                lcName = transformCaseFunc(name);\n                /* Execute a hook if present */ hookEvent.attrName = lcName;\n                hookEvent.attrValue = value;\n                hookEvent.keepAttr = true;\n                hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n                _executeHook(\"uponSanitizeAttribute\", currentNode, hookEvent);\n                value = hookEvent.attrValue;\n                /* Did the hooks approve of the attribute? */ if (hookEvent.forceKeepAttr) {\n                    continue;\n                }\n                /* Remove attribute */ _removeAttribute(name, currentNode);\n                /* Did the hooks approve of the attribute? */ if (!hookEvent.keepAttr) {\n                    continue;\n                }\n                /* Work around a security issue in jQuery 3.0 */ if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n                    _removeAttribute(name, currentNode);\n                    continue;\n                }\n                /* Sanitize attribute content to be template-safe */ if (SAFE_FOR_TEMPLATES) {\n                    value = stringReplace(value, MUSTACHE_EXPR$1, \" \");\n                    value = stringReplace(value, ERB_EXPR$1, \" \");\n                    value = stringReplace(value, TMPLIT_EXPR$1, \" \");\n                }\n                /* Is `value` valid for this attribute? */ var lcTag = transformCaseFunc(currentNode.nodeName);\n                if (!_isValidAttribute(lcTag, lcName, value)) {\n                    continue;\n                }\n                /* Full DOM Clobbering protection via namespace isolation,\n         * Prefix id and name attributes with `user-content-`\n         */ if (SANITIZE_NAMED_PROPS && (lcName === \"id\" || lcName === \"name\")) {\n                    // Remove the attribute with this value\n                    _removeAttribute(name, currentNode);\n                    // Prefix the value and later re-create the attribute with the sanitized value\n                    value = SANITIZE_NAMED_PROPS_PREFIX + value;\n                }\n                /* Work around a security issue with comments inside attributes */ if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n                    _removeAttribute(name, currentNode);\n                    continue;\n                }\n                /* Handle attributes that require Trusted Types */ if (trustedTypesPolicy && _typeof(trustedTypes) === \"object\" && typeof trustedTypes.getAttributeType === \"function\") {\n                    if (namespaceURI) ;\n                    else {\n                        switch(trustedTypes.getAttributeType(lcTag, lcName)){\n                            case \"TrustedHTML\":\n                                {\n                                    value = trustedTypesPolicy.createHTML(value);\n                                    break;\n                                }\n                            case \"TrustedScriptURL\":\n                                {\n                                    value = trustedTypesPolicy.createScriptURL(value);\n                                    break;\n                                }\n                        }\n                    }\n                }\n                /* Handle invalid data-* attribute set by try-catching it */ try {\n                    if (namespaceURI) {\n                        currentNode.setAttributeNS(namespaceURI, name, value);\n                    } else {\n                        /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */ currentNode.setAttribute(name, value);\n                    }\n                    if (_isClobbered(currentNode)) {\n                        _forceRemove(currentNode);\n                    } else {\n                        arrayPop(DOMPurify.removed);\n                    }\n                } catch (_) {}\n            }\n            /* Execute a hook if present */ _executeHook(\"afterSanitizeAttributes\", currentNode, null);\n        };\n        /**\n     * _sanitizeShadowDOM\n     *\n     * @param  {DocumentFragment} fragment to iterate over recursively\n     */ var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n            var shadowNode;\n            var shadowIterator = _createIterator(fragment);\n            /* Execute a hook if present */ _executeHook(\"beforeSanitizeShadowDOM\", fragment, null);\n            while(shadowNode = shadowIterator.nextNode()){\n                /* Execute a hook if present */ _executeHook(\"uponSanitizeShadowNode\", shadowNode, null);\n                /* Sanitize tags and elements */ if (_sanitizeElements(shadowNode)) {\n                    continue;\n                }\n                /* Deep shadow DOM detected */ if (shadowNode.content instanceof DocumentFragment) {\n                    _sanitizeShadowDOM(shadowNode.content);\n                }\n                /* Check attributes, sanitize if necessary */ _sanitizeAttributes(shadowNode);\n            }\n            /* Execute a hook if present */ _executeHook(\"afterSanitizeShadowDOM\", fragment, null);\n        };\n        /**\n     * Sanitize\n     * Public method providing core sanitation functionality\n     *\n     * @param {String|Node} dirty string or DOM node\n     * @param {Object} configuration object\n     */ // eslint-disable-next-line complexity\n        DOMPurify.sanitize = function(dirty) {\n            var cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            var body;\n            var importedNode;\n            var currentNode;\n            var oldNode;\n            var returnNode;\n            /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */ IS_EMPTY_INPUT = !dirty;\n            if (IS_EMPTY_INPUT) {\n                dirty = \"<!-->\";\n            }\n            /* Stringify, in case dirty is an object */ if (typeof dirty !== \"string\" && !_isNode(dirty)) {\n                if (typeof dirty.toString === \"function\") {\n                    dirty = dirty.toString();\n                    if (typeof dirty !== \"string\") {\n                        throw typeErrorCreate(\"dirty is not a string, aborting\");\n                    }\n                } else {\n                    throw typeErrorCreate(\"toString is not a function\");\n                }\n            }\n            /* Check we can run. Otherwise fall back or ignore */ if (!DOMPurify.isSupported) {\n                if (_typeof(window1.toStaticHTML) === \"object\" || typeof window1.toStaticHTML === \"function\") {\n                    if (typeof dirty === \"string\") {\n                        return window1.toStaticHTML(dirty);\n                    }\n                    if (_isNode(dirty)) {\n                        return window1.toStaticHTML(dirty.outerHTML);\n                    }\n                }\n                return dirty;\n            }\n            /* Assign config vars */ if (!SET_CONFIG) {\n                _parseConfig(cfg);\n            }\n            /* Clean up removed elements */ DOMPurify.removed = [];\n            /* Check if dirty is correctly typed for IN_PLACE */ if (typeof dirty === \"string\") {\n                IN_PLACE = false;\n            }\n            if (IN_PLACE) {\n                /* Do some early pre-sanitization to avoid unsafe root nodes */ if (dirty.nodeName) {\n                    var tagName = transformCaseFunc(dirty.nodeName);\n                    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n                        throw typeErrorCreate(\"root node is forbidden and cannot be sanitized in-place\");\n                    }\n                }\n            } else if (dirty instanceof Node) {\n                /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */ body = _initDocument(\"<!---->\");\n                importedNode = body.ownerDocument.importNode(dirty, true);\n                if (importedNode.nodeType === 1 && importedNode.nodeName === \"BODY\") {\n                    /* Node is already a body, use as is */ body = importedNode;\n                } else if (importedNode.nodeName === \"HTML\") {\n                    body = importedNode;\n                } else {\n                    // eslint-disable-next-line unicorn/prefer-dom-node-append\n                    body.appendChild(importedNode);\n                }\n            } else {\n                /* Exit directly if we have nothing to do */ if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes\n                dirty.indexOf(\"<\") === -1) {\n                    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n                }\n                /* Initialize the document to work on */ body = _initDocument(dirty);\n                /* Check we have a DOM node from the data */ if (!body) {\n                    return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : \"\";\n                }\n            }\n            /* Remove first element node (ours) if FORCE_BODY is set */ if (body && FORCE_BODY) {\n                _forceRemove(body.firstChild);\n            }\n            /* Get node iterator */ var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n            /* Now start iterating over the created document */ while(currentNode = nodeIterator.nextNode()){\n                /* Fix IE's strange behavior with manipulated textNodes #89 */ if (currentNode.nodeType === 3 && currentNode === oldNode) {\n                    continue;\n                }\n                /* Sanitize tags and elements */ if (_sanitizeElements(currentNode)) {\n                    continue;\n                }\n                /* Shadow DOM detected, sanitize it */ if (currentNode.content instanceof DocumentFragment) {\n                    _sanitizeShadowDOM(currentNode.content);\n                }\n                /* Check attributes, sanitize if necessary */ _sanitizeAttributes(currentNode);\n                oldNode = currentNode;\n            }\n            oldNode = null;\n            /* If we sanitized `dirty` in-place, return it. */ if (IN_PLACE) {\n                return dirty;\n            }\n            /* Return sanitized string or DOM */ if (RETURN_DOM) {\n                if (RETURN_DOM_FRAGMENT) {\n                    returnNode = createDocumentFragment.call(body.ownerDocument);\n                    while(body.firstChild){\n                        // eslint-disable-next-line unicorn/prefer-dom-node-append\n                        returnNode.appendChild(body.firstChild);\n                    }\n                } else {\n                    returnNode = body;\n                }\n                if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmod) {\n                    /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */ returnNode = importNode.call(originalDocument, returnNode, true);\n                }\n                return returnNode;\n            }\n            var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n            /* Serialize doctype if allowed */ if (WHOLE_DOCUMENT && ALLOWED_TAGS[\"!doctype\"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n                serializedHTML = \"<!DOCTYPE \" + body.ownerDocument.doctype.name + \">\\n\" + serializedHTML;\n            }\n            /* Sanitize final string template-safe */ if (SAFE_FOR_TEMPLATES) {\n                serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, \" \");\n                serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, \" \");\n                serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR$1, \" \");\n            }\n            return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n        };\n        /**\n     * Public method to set the configuration once\n     * setConfig\n     *\n     * @param {Object} cfg configuration object\n     */ DOMPurify.setConfig = function(cfg) {\n            _parseConfig(cfg);\n            SET_CONFIG = true;\n        };\n        /**\n     * Public method to remove the configuration\n     * clearConfig\n     *\n     */ DOMPurify.clearConfig = function() {\n            CONFIG = null;\n            SET_CONFIG = false;\n        };\n        /**\n     * Public method to check if an attribute value is valid.\n     * Uses last set config, if any. Otherwise, uses config defaults.\n     * isValidAttribute\n     *\n     * @param  {string} tag Tag name of containing element.\n     * @param  {string} attr Attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n     */ DOMPurify.isValidAttribute = function(tag, attr, value) {\n            /* Initialize shared config vars if necessary. */ if (!CONFIG) {\n                _parseConfig({});\n            }\n            var lcTag = transformCaseFunc(tag);\n            var lcName = transformCaseFunc(attr);\n            return _isValidAttribute(lcTag, lcName, value);\n        };\n        /**\n     * AddHook\n     * Public method to add DOMPurify hooks\n     *\n     * @param {String} entryPoint entry point for the hook to add\n     * @param {Function} hookFunction function to execute\n     */ DOMPurify.addHook = function(entryPoint, hookFunction) {\n            if (typeof hookFunction !== \"function\") {\n                return;\n            }\n            hooks[entryPoint] = hooks[entryPoint] || [];\n            arrayPush(hooks[entryPoint], hookFunction);\n        };\n        /**\n     * RemoveHook\n     * Public method to remove a DOMPurify hook at a given entryPoint\n     * (pops it from the stack of hooks if more are present)\n     *\n     * @param {String} entryPoint entry point for the hook to remove\n     * @return {Function} removed(popped) hook\n     */ DOMPurify.removeHook = function(entryPoint) {\n            if (hooks[entryPoint]) {\n                return arrayPop(hooks[entryPoint]);\n            }\n        };\n        /**\n     * RemoveHooks\n     * Public method to remove all DOMPurify hooks at a given entryPoint\n     *\n     * @param  {String} entryPoint entry point for the hooks to remove\n     */ DOMPurify.removeHooks = function(entryPoint) {\n            if (hooks[entryPoint]) {\n                hooks[entryPoint] = [];\n            }\n        };\n        /**\n     * RemoveAllHooks\n     * Public method to remove all DOMPurify hooks\n     *\n     */ DOMPurify.removeAllHooks = function() {\n            hooks = {};\n        };\n        return DOMPurify;\n    }\n    var purify = createDOMPurify();\n    return purify;\n}); //# sourceMappingURL=purify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/dompurify/dist/purify.js\n"));

/***/ })

}]);