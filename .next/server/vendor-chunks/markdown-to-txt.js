"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/markdown-to-txt";
exports.ids = ["vendor-chunks/markdown-to-txt"];
exports.modules = {

/***/ "(ssr)/./node_modules/markdown-to-txt/dist/markdown-to-txt.js":
/*!**************************************************************!*\
  !*** ./node_modules/markdown-to-txt/dist/markdown-to-txt.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.markdownToTxt = void 0;\nconst marked_1 = __webpack_require__(/*! marked */ \"(ssr)/./node_modules/marked/lib/marked.cjs\");\nconst lodash_1 = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst block = (text)=>text + \"\\n\\n\";\nconst escapeBlock = (text)=>(0, lodash_1.escape)(text) + \"\\n\\n\";\nconst line = (text)=>text + \"\\n\";\nconst inline = (text)=>text;\nconst newline = ()=>\"\\n\";\nconst empty = ()=>\"\";\nconst TxtRenderer = {\n    // Block elements\n    code: escapeBlock,\n    blockquote: block,\n    html: empty,\n    heading: block,\n    hr: newline,\n    list: (text)=>block(text.trim()),\n    listitem: line,\n    checkbox: empty,\n    paragraph: block,\n    table: (header, body)=>line(header + body),\n    tablerow: (text)=>line(text.trim()),\n    tablecell: (text)=>text + \" \",\n    // Inline elements\n    strong: inline,\n    em: inline,\n    codespan: inline,\n    br: newline,\n    del: inline,\n    link: (_0, _1, text)=>text,\n    image: (_0, _1, text)=>text,\n    text: inline,\n    // etc.\n    options: {}\n};\n/**\n * Converts markdown to plaintext using the marked Markdown library.\n * Accepts [MarkedOptions](https://marked.js.org/using_advanced#options) as\n * the second argument.\n *\n * NOTE: The output of markdownToTxt is NOT sanitized. The output may contain\n * valid HTML, JavaScript, etc. Be sure to sanitize if the output is intended\n * for web use.\n *\n * @param markdown the markdown text to txtify\n * @param options  the marked options\n * @returns the unmarked text\n */ function markdownToTxt(markdown, options) {\n    const unmarked = (0, marked_1.marked)(markdown, Object.assign(Object.assign({}, options), {\n        renderer: TxtRenderer\n    }));\n    const unescaped = (0, lodash_1.unescape)(unmarked);\n    const trimmed = unescaped.trim();\n    return trimmed;\n}\nexports.markdownToTxt = markdownToTxt;\nexports[\"default\"] = markdownToTxt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24tdG8tdHh0L2Rpc3QvbWFya2Rvd24tdG8tdHh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLDBEQUFRO0FBQ2pDLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLHFEQUFRO0FBQ2pDLE1BQU1FLFFBQVEsQ0FBQ0MsT0FBU0EsT0FBTztBQUMvQixNQUFNQyxjQUFjLENBQUNELE9BQVMsQ0FBQyxHQUFHRixTQUFTSSxNQUFNLEVBQUVGLFFBQVE7QUFDM0QsTUFBTUcsT0FBTyxDQUFDSCxPQUFTQSxPQUFPO0FBQzlCLE1BQU1JLFNBQVMsQ0FBQ0osT0FBU0E7QUFDekIsTUFBTUssVUFBVSxJQUFNO0FBQ3RCLE1BQU1DLFFBQVEsSUFBTTtBQUNwQixNQUFNQyxjQUFjO0lBQ2hCLGlCQUFpQjtJQUNqQkMsTUFBTVA7SUFDTlEsWUFBWVY7SUFDWlcsTUFBTUo7SUFDTkssU0FBU1o7SUFDVGEsSUFBSVA7SUFDSlEsTUFBTSxDQUFDYixPQUFTRCxNQUFNQyxLQUFLYyxJQUFJO0lBQy9CQyxVQUFVWjtJQUNWYSxVQUFVVjtJQUNWVyxXQUFXbEI7SUFDWG1CLE9BQU8sQ0FBQ0MsUUFBUUMsT0FBU2pCLEtBQUtnQixTQUFTQztJQUN2Q0MsVUFBVSxDQUFDckIsT0FBU0csS0FBS0gsS0FBS2MsSUFBSTtJQUNsQ1EsV0FBVyxDQUFDdEIsT0FBU0EsT0FBTztJQUM1QixrQkFBa0I7SUFDbEJ1QixRQUFRbkI7SUFDUm9CLElBQUlwQjtJQUNKcUIsVUFBVXJCO0lBQ1ZzQixJQUFJckI7SUFDSnNCLEtBQUt2QjtJQUNMd0IsTUFBTSxDQUFDQyxJQUFJQyxJQUFJOUIsT0FBU0E7SUFDeEIrQixPQUFPLENBQUNGLElBQUlDLElBQUk5QixPQUFTQTtJQUN6QkEsTUFBTUk7SUFDTixPQUFPO0lBQ1A0QixTQUFTLENBQUM7QUFDZDtBQUNBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNyQyxjQUFjc0MsUUFBUSxFQUFFRCxPQUFPO0lBQ3BDLE1BQU1FLFdBQVcsQ0FBQyxHQUFHdEMsU0FBU3VDLE1BQU0sRUFBRUYsVUFBVTFDLE9BQU82QyxNQUFNLENBQUM3QyxPQUFPNkMsTUFBTSxDQUFDLENBQUMsR0FBR0osVUFBVTtRQUFFSyxVQUFVOUI7SUFBWTtJQUNsSCxNQUFNK0IsWUFBWSxDQUFDLEdBQUd4QyxTQUFTeUMsUUFBUSxFQUFFTDtJQUN6QyxNQUFNTSxVQUFVRixVQUFVeEIsSUFBSTtJQUM5QixPQUFPMEI7QUFDWDtBQUNBL0MscUJBQXFCLEdBQUdFO0FBQ3hCRixrQkFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL211c2ljbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLXRvLXR4dC9kaXN0L21hcmtkb3duLXRvLXR4dC5qcz9jY2VmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYXJrZG93blRvVHh0ID0gdm9pZCAwO1xuY29uc3QgbWFya2VkXzEgPSByZXF1aXJlKFwibWFya2VkXCIpO1xuY29uc3QgbG9kYXNoXzEgPSByZXF1aXJlKFwibG9kYXNoXCIpO1xuY29uc3QgYmxvY2sgPSAodGV4dCkgPT4gdGV4dCArIFwiXFxuXFxuXCI7XG5jb25zdCBlc2NhcGVCbG9jayA9ICh0ZXh0KSA9PiAoMCwgbG9kYXNoXzEuZXNjYXBlKSh0ZXh0KSArIFwiXFxuXFxuXCI7XG5jb25zdCBsaW5lID0gKHRleHQpID0+IHRleHQgKyBcIlxcblwiO1xuY29uc3QgaW5saW5lID0gKHRleHQpID0+IHRleHQ7XG5jb25zdCBuZXdsaW5lID0gKCkgPT4gXCJcXG5cIjtcbmNvbnN0IGVtcHR5ID0gKCkgPT4gXCJcIjtcbmNvbnN0IFR4dFJlbmRlcmVyID0ge1xuICAgIC8vIEJsb2NrIGVsZW1lbnRzXG4gICAgY29kZTogZXNjYXBlQmxvY2ssXG4gICAgYmxvY2txdW90ZTogYmxvY2ssXG4gICAgaHRtbDogZW1wdHksXG4gICAgaGVhZGluZzogYmxvY2ssXG4gICAgaHI6IG5ld2xpbmUsXG4gICAgbGlzdDogKHRleHQpID0+IGJsb2NrKHRleHQudHJpbSgpKSxcbiAgICBsaXN0aXRlbTogbGluZSxcbiAgICBjaGVja2JveDogZW1wdHksXG4gICAgcGFyYWdyYXBoOiBibG9jayxcbiAgICB0YWJsZTogKGhlYWRlciwgYm9keSkgPT4gbGluZShoZWFkZXIgKyBib2R5KSxcbiAgICB0YWJsZXJvdzogKHRleHQpID0+IGxpbmUodGV4dC50cmltKCkpLFxuICAgIHRhYmxlY2VsbDogKHRleHQpID0+IHRleHQgKyBcIiBcIixcbiAgICAvLyBJbmxpbmUgZWxlbWVudHNcbiAgICBzdHJvbmc6IGlubGluZSxcbiAgICBlbTogaW5saW5lLFxuICAgIGNvZGVzcGFuOiBpbmxpbmUsXG4gICAgYnI6IG5ld2xpbmUsXG4gICAgZGVsOiBpbmxpbmUsXG4gICAgbGluazogKF8wLCBfMSwgdGV4dCkgPT4gdGV4dCxcbiAgICBpbWFnZTogKF8wLCBfMSwgdGV4dCkgPT4gdGV4dCxcbiAgICB0ZXh0OiBpbmxpbmUsXG4gICAgLy8gZXRjLlxuICAgIG9wdGlvbnM6IHt9LFxufTtcbi8qKlxuICogQ29udmVydHMgbWFya2Rvd24gdG8gcGxhaW50ZXh0IHVzaW5nIHRoZSBtYXJrZWQgTWFya2Rvd24gbGlicmFyeS5cbiAqIEFjY2VwdHMgW01hcmtlZE9wdGlvbnNdKGh0dHBzOi8vbWFya2VkLmpzLm9yZy91c2luZ19hZHZhbmNlZCNvcHRpb25zKSBhc1xuICogdGhlIHNlY29uZCBhcmd1bWVudC5cbiAqXG4gKiBOT1RFOiBUaGUgb3V0cHV0IG9mIG1hcmtkb3duVG9UeHQgaXMgTk9UIHNhbml0aXplZC4gVGhlIG91dHB1dCBtYXkgY29udGFpblxuICogdmFsaWQgSFRNTCwgSmF2YVNjcmlwdCwgZXRjLiBCZSBzdXJlIHRvIHNhbml0aXplIGlmIHRoZSBvdXRwdXQgaXMgaW50ZW5kZWRcbiAqIGZvciB3ZWIgdXNlLlxuICpcbiAqIEBwYXJhbSBtYXJrZG93biB0aGUgbWFya2Rvd24gdGV4dCB0byB0eHRpZnlcbiAqIEBwYXJhbSBvcHRpb25zICB0aGUgbWFya2VkIG9wdGlvbnNcbiAqIEByZXR1cm5zIHRoZSB1bm1hcmtlZCB0ZXh0XG4gKi9cbmZ1bmN0aW9uIG1hcmtkb3duVG9UeHQobWFya2Rvd24sIG9wdGlvbnMpIHtcbiAgICBjb25zdCB1bm1hcmtlZCA9ICgwLCBtYXJrZWRfMS5tYXJrZWQpKG1hcmtkb3duLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHJlbmRlcmVyOiBUeHRSZW5kZXJlciB9KSk7XG4gICAgY29uc3QgdW5lc2NhcGVkID0gKDAsIGxvZGFzaF8xLnVuZXNjYXBlKSh1bm1hcmtlZCk7XG4gICAgY29uc3QgdHJpbW1lZCA9IHVuZXNjYXBlZC50cmltKCk7XG4gICAgcmV0dXJuIHRyaW1tZWQ7XG59XG5leHBvcnRzLm1hcmtkb3duVG9UeHQgPSBtYXJrZG93blRvVHh0O1xuZXhwb3J0cy5kZWZhdWx0ID0gbWFya2Rvd25Ub1R4dDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1hcmtkb3duVG9UeHQiLCJtYXJrZWRfMSIsInJlcXVpcmUiLCJsb2Rhc2hfMSIsImJsb2NrIiwidGV4dCIsImVzY2FwZUJsb2NrIiwiZXNjYXBlIiwibGluZSIsImlubGluZSIsIm5ld2xpbmUiLCJlbXB0eSIsIlR4dFJlbmRlcmVyIiwiY29kZSIsImJsb2NrcXVvdGUiLCJodG1sIiwiaGVhZGluZyIsImhyIiwibGlzdCIsInRyaW0iLCJsaXN0aXRlbSIsImNoZWNrYm94IiwicGFyYWdyYXBoIiwidGFibGUiLCJoZWFkZXIiLCJib2R5IiwidGFibGVyb3ciLCJ0YWJsZWNlbGwiLCJzdHJvbmciLCJlbSIsImNvZGVzcGFuIiwiYnIiLCJkZWwiLCJsaW5rIiwiXzAiLCJfMSIsImltYWdlIiwib3B0aW9ucyIsIm1hcmtkb3duIiwidW5tYXJrZWQiLCJtYXJrZWQiLCJhc3NpZ24iLCJyZW5kZXJlciIsInVuZXNjYXBlZCIsInVuZXNjYXBlIiwidHJpbW1lZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/markdown-to-txt/dist/markdown-to-txt.js\n");

/***/ })

};
;